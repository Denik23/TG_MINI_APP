/* ===================== Mini App: Zubr Forms (Sheets CRUD + iframe) ===================== */
const tg = window.Telegram.WebApp;
tg.ready();

/* ---------- –¢–µ–º–∞ ---------- */
(function setTheme() {
  const scheme = tg.colorScheme || (matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
  document.documentElement.setAttribute('data-theme', scheme);
})();
tg.onEvent('themeChanged', () => location.reload());

/* ---------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---------- */
const ADMIN_ID = '226674400';                                // –≤–∞—à Telegram user id (–∫—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∞–≤–∏—Ç—å)
const API_URL  = 'https://script.google.com/macros/s/AKfycbxYLWsMRGFerrJZQy-oI_QbfFDwgcyyxHfNFaCVQH2CQ0g6v_nPOCuUe-IuFsYg9ZGQ/exec'; // <--- –í–°–¢–ê–í–¨–¢–ï –°–í–û–ô URL /exec
const appLoader  = document.getElementById('appLoader');

/* ---------- –°–æ—Å—Ç–æ—è–Ω–∏–µ ---------- */
let forms = [];

/* ---------- Helpers ---------- */
const getUserId = () =>
  String(tg.initDataUnsafe?.user?.id || new URLSearchParams(location.search).get('tgid') || '');
const isAdmin = () => getUserId() === ADMIN_ID;

/* ---------- API ---------- */
async function loadForms() {
  try {
    const res = await fetch(`${API_URL}?action=list`);
    const json = await res.json();
    if (!json.ok) throw new Error(json.error || 'load error');
    forms = Array.isArray(json.data) ? json.data : [];
  } catch (e) {
    forms = [];
    tg.showAlert?.('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º: ' + e.message);
  } finally {
    render();
    // –°–∫—Ä—ã—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–∞–¥–µ—Ä –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏/—Ä–µ–Ω–¥–µ—Ä–∞
    appLoader?.setAttribute('aria-hidden', 'true');
  }
}


// –ú—É—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ GET (–∏–∑–±–µ–≥–∞–µ–º CORS/preflight –≤ WebView)
async function saveFormRemote(form) {
  const userId = getUserId();
  const qs = new URLSearchParams({
    action: 'save',
    userId,
    id: form.id || '',
    title: form.title || '',
    desc: form.desc || '',
    baseUrl: form.baseUrl || ''
  });
  const res = await fetch(`${API_URL}?${qs.toString()}`);
  const text = await res.text();
  let json; try { json = JSON.parse(text); } catch { throw new Error(`Bad JSON: ${text}`); }
  if (!json.ok) throw new Error(json.error || 'save error');
}

async function deleteFormRemote(id) {
  const userId = getUserId();
  const qs = new URLSearchParams({ action: 'delete', userId, id });
  const res = await fetch(`${API_URL}?${qs.toString()}`);
  const text = await res.text();
  let json; try { json = JSON.parse(text); } catch { throw new Error(`Bad JSON: ${text}`); }
  if (!json.ok) throw new Error(json.error || 'delete error');
}

/* ---------- UI refs ---------- */
const list        = document.getElementById('list');
const search      = document.getElementById('searchInput');
const addBtn      = document.getElementById('addBtn');

// –®—Ç–æ—Ä–∫–∞ —Å iframe
const sheet       = document.getElementById('sheet');
const frame       = document.getElementById('formFrame');
const loader      = document.getElementById('loader');
const sheetTitle  = document.getElementById('sheetTitle');
document.getElementById('backBtn').addEventListener('click', closeSheet);

// –ú–æ–¥–∞–ª–∫–∞
const modal       = document.getElementById('formModal');
const modalTitle  = document.getElementById('modalTitle');
const modalClose  = document.getElementById('modalClose');
const modalSave   = document.getElementById('modalSave');
const modalCancel = document.getElementById('modalCancel');
const fldId       = document.getElementById('fldId');
const fldTitle    = document.getElementById('fldTitle');
const fldDesc     = document.getElementById('fldDesc');
const fldBaseUrl  = document.getElementById('fldBaseUrl');

/* ---------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---------- */
if (isAdmin()) addBtn.hidden = false;
loadForms();
search.addEventListener('input', render);
addBtn.addEventListener('click', () => openModalForCreate());
modalClose.addEventListener('click', closeModal);
modalCancel.addEventListener('click', closeModal);
modalSave.addEventListener('click', onModalSave);

/* ---------- –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ ---------- */
function render() {
  const q = (search.value || '').trim().toLowerCase();
  list.innerHTML = '';
  const data = forms.filter(f =>
    (f.title || '').toLowerCase().includes(q) ||
    (f.desc  || '').toLowerCase().includes(q)
  );

  if (!data.length) {
    list.innerHTML = '<div class="card">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>';
    return;
  }

  data.forEach(f => {
    const card = document.createElement('div');
    card.className = 'card';
    card.innerHTML = `
      <div class="card-title">${f.title}</div>
      <div class="card-actions">
        <div class="actions-left">
          <button class="btn btn-primary">–û—Ç–∫—Ä—ã—Ç—å</button>
          <button class="btn btn-ghost">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
        </div>
        ${isAdmin() ? `
        <div class="actions-right">
          <button class="btn btn-ghost btn-sm" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
          <button class="btn btn-danger btn-sm" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
        </div>` : ''}
      </div>`;

    const [openBtn, moreBtn, editBtn, delBtn] = card.querySelectorAll('button');
    openBtn.onclick = () => openForm(f);
    moreBtn.onclick = () => tg.showPopup?.({
      title: f.title,
      message: (f.desc || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç') + `\n\nID: ${f.id || '‚Äî'}`,
      buttons: [{ id:'ok', type:'close', text:'OK' }]
    });
    if (isAdmin()) {
      editBtn.onclick = () => openModalForEdit(f);
      delBtn.onclick  = () => deleteForm(f);
    }
    list.appendChild(card);
  });
}

/* ---------- –ú–æ–¥–∞–ª–∫–∞: —Å–æ–∑–¥–∞—Ç—å/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ---------- */
function openModalForCreate() {
  modalTitle.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É';
  fldId.value = '';
  fldTitle.value = '';
  fldDesc.value = '';
  fldBaseUrl.value = '';
  modal.classList.remove('hidden');
}
function openModalForEdit(f) {
  modalTitle.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É';
  fldId.value = f.id || '';
  fldTitle.value = f.title || '';
  fldDesc.value = f.desc || '';
  fldBaseUrl.value = f.baseUrl || '';
  modal.classList.remove('hidden');
}
function closeModal() { modal.classList.add('hidden'); }

async function onModalSave() {
  const form = {
    id: (fldId.value || '').trim(),
    title: (fldTitle.value || '').trim(),
    desc: (fldDesc.value || '').trim(),
    baseUrl: (fldBaseUrl.value || '').trim()
  };
  if (!form.title) return tg.showAlert?.('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã');
  if (!form.baseUrl.includes('entry.') || !form.baseUrl.endsWith('='))
    return tg.showAlert?.('–í—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É Google Forms —Å entry.XXXX –∏ –Ω–∞ –∫–æ–Ω—Ü–µ "="');

  try {
    await saveFormRemote(form);
    closeModal();
    await loadForms();
    tg.showToast?.({ text: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ', duration: 1400 });
  } catch (e) {
    tg.showAlert?.('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + e.message);
  }
}

/* ---------- –£–¥–∞–ª–µ–Ω–∏–µ ---------- */
function deleteForm(f) {
  tg.showPopup?.({
    title: '–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ä–º—É?',
    message: `¬´${f.title}¬ª –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞.`,
    buttons: [
      { id:'cancel', type:'cancel', text:'–û—Ç–º–µ–Ω–∞' },
      { id:'ok',     type:'destructive', text:'–£–¥–∞–ª–∏—Ç—å' }
    ]
  }, async (btnId) => {
    if (btnId === 'ok') {
      try {
        await deleteFormRemote(f.id);
        await loadForms();
        tg.showToast?.({ text: '–£–¥–∞–ª–µ–Ω–æ', duration: 1400 });
      } catch (e) {
        tg.showAlert?.('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + e.message);
      }
    }
  });
}

/* ---------- –û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –í–ù–£–¢–†–ò –º–∏–Ω–∏-–∞–ø–ø–∞ (iframe) ---------- */
function openForm(form) {
  const uid = getUserId();
  if (!uid) {
    tg.showAlert?.('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Telegram ID. –û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–∞–ø–ø –∏–∑ Telegram –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ ?tgid=ID –¥–ª—è —Ç–µ—Å—Ç–∞.');
    return;
  }

  if (!form.baseUrl) {
    tg.showAlert?.('–°—Å—ã–ª–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.');
    return;
  }

  let url = form.baseUrl;

  // === Google Forms ===
  if (url.includes("docs.google.com/forms")) {
    if (!url.endsWith('=')) {
      tg.showAlert?.('baseUrl –¥–ª—è —Ñ–æ—Ä–º—ã –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è "=".');
      return;
    }
    url = `${url}${encodeURIComponent(uid)}&embedded=true`;
  }

  // === Google Slides ===
  else if (url.includes("docs.google.com/presentation")) {
    // –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç /pub? ‚Üí –º–µ–Ω—è–µ–º –Ω–∞ /embed?
    if (url.includes("/pub?")) {
      url = url.replace("/pub?", "/embed?");
    }
    // –µ—Å–ª–∏ –≤ —Å—Å—ã–ª–∫–µ –Ω–µ—Ç /embed?, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if (!url.includes("/embed?")) {
      url = url.replace(/\/d\/e\/[^/]+/, "$&/embed");
    }
  }

  // === –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ ===
  else {
    url = `${url}`;
  }

  sheetTitle.textContent = form.title || '–î–æ–∫—É–º–µ–Ω—Ç';
  showSheet(url);
}

function showSheet(url) {
  tg.HapticFeedback?.impactOccurred('light');

  sheet.classList.remove('hidden');
  loader.removeAttribute('aria-hidden');
  frame.src = 'about:blank';
  requestAnimationFrame(() => sheet.classList.add('open'));

  // –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –µ—Å–ª–∏ iframe –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–∏—Ç–∏–∫–∞–º–∏
  const fallback = setTimeout(() => {
    try { tg.openLink?.(url); } catch { window.open(url, '_blank'); }
  }, 4500);

  frame.onload = () => {
    clearTimeout(fallback);
    loader.setAttribute('aria-hidden', 'true');
  };

  frame.src = url;
}

function closeSheet() {
  sheet.classList.remove('open');
  setTimeout(() => {
    frame.src = 'about:blank';
    loader.setAttribute('aria-hidden', 'true');
    sheet.classList.add('hidden');
  }, 250);
}
/* ---------- –°–∫—Ä—ã–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ —Ç–∞–ø—É –≤–Ω–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ ---------- */
const blurIfOutsideField = (e) => {
  const isField = e.target.closest('input, textarea, select, [contenteditable="true"]');
  if (isField) return;

  const el = document.activeElement;
  if (el && el.matches('input, textarea, select, [contenteditable="true"]')) {
    el.blur();

    // iOS Telegram WebView –∏–Ω–æ–≥–¥–∞ —É–ø—Ä—è–º–∏—Ç—Å—è ‚Äî –¥–µ–ª–∞–µ–º "—Ñ–∏–∫—Ç–∏–≤–Ω—ã–π" –∏–Ω–ø—É—Ç
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
    if (isIOS) {
      const dummy = document.createElement('input');
      Object.assign(dummy.style, {
        position:'fixed', top:'-1000px', opacity:'0', pointerEvents:'none'
      });
      document.body.appendChild(dummy);
      dummy.focus();
      setTimeout(() => { dummy.blur(); dummy.remove(); window.scrollTo(0,0); }, 0);
    } else {
      setTimeout(() => window.scrollTo(0,0), 0);
    }
  }
};

document.addEventListener('touchstart', blurIfOutsideField, { passive:true, capture:true });
document.addEventListener('mousedown',  blurIfOutsideField, true);

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –∫–ª–∏–∫ –ø–æ —Ñ–æ–Ω—É –º–æ–¥–∞–ª–∫–∏ —Ç–æ–∂–µ —Å–Ω–∏–º–∞–µ—Ç —Ñ–æ–∫—É—Å
modal.addEventListener('click', (e) => {
  if (e.target.id === 'formModal') {
    if (document.activeElement && 'blur' in document.activeElement) {
      document.activeElement.blur();
    }
  }
});
